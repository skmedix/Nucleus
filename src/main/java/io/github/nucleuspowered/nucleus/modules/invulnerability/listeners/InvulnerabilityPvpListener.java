/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.internal.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.commands.GodCommand;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfigAdapter;
import io.github.nucleuspowered.nucleus.modules.invulnerability.handlers.InvulnerabilityService;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.cause.entity.damage.source.EntityDamageSource;
import org.spongepowered.api.event.entity.AttackEntityEvent;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.filter.cause.Root;

public class InvulnerabilityPvpListener implements ListenerBase.Conditional {

    private final InvulnerabilityService service = getServiceUnchecked(InvulnerabilityService.class);
    private final String perm = getPermissionHandlerFor(GodCommand.class).getPermissionWithSuffix(GodCommand.PVP_OVERRIDE);

    @Listener
    public void onAttack(AttackEntityEvent event, @Root EntityDamageSource source, @Getter("getTargetEntity") Entity entity) {
        if (source.getSource() instanceof Player) {
            Player player = (Player) source.getSource();
            if (this.service.isInvulnerable(player) && !hasPermission(player, this.perm) && entity instanceof Player) {
                event.setCancelled(true);
            }
        }
    }

    @Override
    public boolean shouldEnable() {
        return getServiceUnchecked(InvulnerabilityConfigAdapter.class).getNodeOrDefault().isDisablePvpOnGod();
    }
}
