/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.Nucleus;
import io.github.nucleuspowered.nucleus.api.exceptions.NucleusException;
import io.github.nucleuspowered.nucleus.internal.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.commands.GodCommand;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfigAdapter;
import io.github.nucleuspowered.nucleus.modules.invulnerability.handlers.InvulnerabilityService;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.network.ClientConnectionEvent;

public class InvulnReloadableListener implements ListenerBase.Conditional {

    private String basePerm = getPermissionHandlerFor(GodCommand.class).getBase();

    @Listener
    public void onPlayerJoin(ClientConnectionEvent.Join joinEvent, @Getter("getTargetEntity") Player player) {
        if (!hasPermission(player, this.basePerm)) {
            try {
                getServiceUnchecked(InvulnerabilityService.class).setInvulnerable(player, false);
            } catch (NucleusException e) {
                if (Nucleus.getNucleus().isDebugMode()) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Override
    public boolean shouldEnable() {
        return getServiceUnchecked(InvulnerabilityConfigAdapter.class).getNodeOrDefault().isGodPermissionOnLogin();
    }

}
